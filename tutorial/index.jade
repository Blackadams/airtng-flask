.chapter(data-title='Masked Numbers')
  .step(data-title='About This Application', data-file='airtng_flask/__init__.py')
    :markdown
      ## About This Application

      ![Airtng](//howtodocs.s3.amazonaws.com/airtng-screen.png)

      This [Flask](http://flask.pocoo.org/) sample application is modeled after the
      rental experience created by [AirBnB](//www.airbnb.com), but with
      more [Klingons](//en.wikipedia.org/wiki/Klingon).

      Host users can offer rental properties which other guest users can
      reserve. The guest and the host can then anonymously communicate via a
      disposable Twilio phone number created just for a reservation. In this
      tutorial, we'll show you the key bits of code to make this work.

      To run this sample app yourself, download the code and follow the
      [instructions on
      GitHub](//github.com/TwilioDevEd/airtng-flask/tree/masked-numbers).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

      ---

      **See Also:**

      * [AirTNG App Part One: Workflow Automation](/docs/tutorials/walkthrough/workflow-automation/python/flask)
      * [Getting Started with Flask](//flask.pocoo.org/docs/0.10/quickstart/)
      * [Flask-Migrate Extension](//flask-migrate.readthedocs.org/en/latest/)
      * [SQLAlchemy ORM](//www.sqlalchemy.org/)
      * [Twilio Rest API](//www.twilio.com/docs/api/rest)
      * [Twilio Python helper library](//www.twilio.com/docs/python/install)

  .step(data-title='Create a Reservation',
    data-file='airtng_flask/views.py',
    data-highlight='100-124')
    :markdown
      ## Create a Reservation

      The first step in connecting a guest and host is creating a reservation.

      Here, we handle a form submission for a new reservation. After we save
      the reservation to the database, we send the host an SMS message asking
      them to accept or reject the reservation.

      ---

      **See Also:**

      * [Getting Started with Flask](//flask.pocoo.org/docs/0.10/quickstart/)


  .step(data-title='Confirm the Reservation',
    data-file='airtng_flask/views.py',
    data-highlight='158-165')
    :markdown
      ## Confirm the Reservation

      Before the reservation is finalized, the host needs to confirm that the property
      was reserved. Learn how to automate this process in our first AirTNG
      tutorial, [Workflow Automation](//twilio.com/docs/tutorials/walkthrough/workflow-automation/python/flask).

      Once the reservation is confirmed, we need to purchase a Twilio number that
      the guest and host can use to communicate. Let's take a look at that next.


  .step(data-title="Purchase a Twilio Number",
    data-file='airtng_flask/models/reservation.py' data-highlight='48-74')
    :markdown
      ## Purchase a Twilio Number

      Here we use the [Twilio Python helper library](//www.twilio.com/docs/python/install) to
      search for and buy a new phone number to associate with the reservation.
      We start by searing for a number in a local area code - if we can't find
      one, we take any available phone number in that country.

      When we buy the number, we designate a [TwiML
      Application](//www.twilio.com/docs/api/rest/applications) that will handle
      [webhook](//en.wikipedia.org/wiki/Webhook) requests when the new number
      receives an incoming call or text.

      We then save the new phone number on our `Reservation` model, so when our
      app receives calls or messages to this number, we'll know which reservation
      the call or text belongs to.

      ---

      **See Also:**

      * [Searching for Available Numbers](//www.twilio.com/docs/api/rest/available-phone-numbers)
      * [Purchase a Phone Number with the REST API](//www.twilio.com/docs/api/rest/incoming-phone-numbers)
      * [Create an Application in your account portal](//www.twilio.com/user/account/apps)


  .step(data-title="Find a Reservation",
    data-file='airtng_flask/views.py',
    data-highlight='215-221')
    :markdown
      ## Find a Reservation

      When someone messages or calls one of the Twilio numbers we purchased for
      a reservation, Twilio makes a request to the URL you set in the TwiML app.
      That request will contain some helpful metadata:

      * The `incoming_phone_number` number that originally called or sent an SMS.
      * The `anonymous_phone_number` Twilio number that triggered this request.

      Take a look at [Twilio's SMS
      Documentation](//www.twilio.com/docs/api/twiml/sms/twilio_request#request-parameters)
      and [Twilio's Voice
      Documentation](//www.twilio.com/docs/api/twiml/twilio_request#synchronous-request-parameters)
      for a full list of the parameters you can use.

      In our code we use the `To` parameter sent by Twilio to find a reservation
      that has the number we bought stored in it, as this is the number both hosts
      and guests will call and send SMS to.


  .step(data-title="Connect Via SMS",
    data-file='airtng_flask/views.py',
    data-highlight='173-181')
    :markdown
      ## Connect Via SMS

      Our [TwiML application](//www.twilio.com/docs/api/rest/applications)
      should be configured to [send HTTP
      requests](//www.twilio.com/docs/api/twiml/twilio_request) to this
      controller method on any incoming text message. Our app responds with
      [TwiML](//www.twilio.com/docs/api/twiml) to tell Twilio what to do in
      response to the message.

      If the initial message sent to the anonymous number was sent by the host,
      we forward it on to the guest. Conversely, if the original message was
      sent by the guest, we forward it to the host.

      We wrote a helper function called `gather_outgoing_phone_number` to help
      us determine which party to forward the message to.

      ---

      **See Also:**

      * [The Message TwiML verb](//www.twilio.com/docs/api/twiml/sms/message)
      * [Your message logs in the account portal](//www.twilio.com/user/account/log/messages)


  .step(data-title="Connect Via Phone Call",
    data-file='airtng_flask/views.py',
    data-highlight='184-193')
    :markdown
      ## Connect Via Phone Call

      Our [Twilio application](//www.twilio.com/docs/api/rest/applications)
      will [send HTTP requests](//www.twilio.com/docs/api/twiml/twilio_request)
      to this method on any incoming voice call. Our app responds with
      [TwiML instructions](//www.twilio.com/docs/api/twiml)
      that tell Twilio to `Play` an introductory MP3 audio file and then
      `Dial` either the guest or host, depending on who initiated the call.

      ---

      **See Also:**
      * [TwiML Dial verb](//www.twilio.com/docs/api/twiml/dial)
      * [TwiML Play verb](//www.twilio.com/docs/api/twiml/dial)

  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented anonymous communications that allow your
      customers to connect while protecting their privacy. If you're a Python
      developer working with Twilio, you might want to check out these other tutorials:

      [**IVR: Phone Tree**](//www.twilio.com/docs/howto/walkthrough/ivr-phone-tree/python/flask)

      Create a seamless customer service experience by building an IVR Phone
      Tree for your company.

      [**Call Tracking**](//www.twilio.com/docs/howto/walkthrough/call-tracking/python/django)

      Measure the effectiveness of different marketing campaigns by
      assigning a unique phone number to different advertisements and track
      which ones have the best call rates while getting some data about the
      callers themselves.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.

      ![Airtng](http://howtodocs.s3.amazonaws.com/airtng-screen2.png)
