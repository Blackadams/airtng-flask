.chapter(data-title='Workflow Automation')
  .step(data-title='Introduction', data-file='airtng_flask/__init__.py')
    :markdown
      ## Workflow Automation - Vacation Rental example

      ![Airtng](http://howtodocs.s3.amazonaws.com/airtng-screen.png)

      At its core this use-case is about enabling your service providers
      (agents, hosts, customer service reps, administrators, etc) to better
      serve their customer. To illustrate a very real-world example of this
      use-case we will implement a webapp for finding and booking vacation
      properties â€” we're calling it Airtng. Here's how it works:

      1. A host creates a vacation property
      2. A guest requests a reservation on that property
      3. The host receives an SMS notifying them of the recent reservation request. The host can either Accept or Reject the reservation.
      4. The guest is notified that their reservation was either accepted or rejected.

      ## Building Blocks

      We'll be using the Twilio REST API to send our users messages at important junctures:

      * [Sending Messages with Twilio API](//www.twilio.com/docs/api/rest/sending-messages)

      and Python + [Flask](//flask.pocoo.org/)
      as our web technology stack:

      * [Getting Started with Flask](//flask.pocoo.org/docs/0.10/quickstart/)

      Let's get started! Click the right arrow to move on to the next step of
      the tutorial.


  .step(data-title='Session users', data-file='airtng_flask/models/user.py',
    data-highlight='8-42')
    :markdown
      ## Users and session management

      For this workflow to work, we need to have users created in our application,
      and allow them to log in into airtng.

      Our `User` model stores a user's basic information, including their phone
      number. We'll use that to send them SMS notifications later.

      **See Also:**
      * [SQLAlchemy ORM](//www.sqlalchemy.org/)
      * [Flask-Migrate Extension](//flask-migrate.readthedocs.org/en/latest/)


  .step(data-title='Vacation Property Model',
    data-file='airtng_flask/models/vacation_property.py',
    data-highlight='6-23')
    :markdown
      ## Vacation Property

      In order to build a true vacation rentals company we'll need a way to
      create the property listings.

      The `VacationProperty` model belongs to the `User` who created it
      (we'll call this user the _host_ moving forward) and contains only two
      properties: a `description` and an `image_url`.

      We also include a couple database relationship fields to help us link
      vacation properties to their host and to any reservations our users make
      for this property.

      **See Also:**
      * [SQLAlchemy entity relationships](//docs.sqlalchemy.org/en/latest/orm/basic_relationships.html)

  .step(data-title="Reservation Model",
    data-file='airtng_flask/models/reservation.py',
    data-highlight='5-33')
    :markdown
      ## The Reservation Model

      The `Reservation` model is at the center of the workflow for this application.
      It is responsible for keeping track of:
        * The `guest` who performed the reservation

        * The `vacation_property` the guest wants to stay in

        * The `status` of the reservation: pending, confirmed, or rejected

  .step(data-title="Reservation Creation",
    data-file='airtng_flask/views.py',
    data-highlight='99-125')
    :markdown
      ## Reservation creation

      The reservation creation form holds only one field, the message that will
      be sent to the _host_ user when reserving one of their properties. The rest
      of the information necessary to create a reservation is taken from the user
      that is logged in into the system and also the relationship between a property
      and its owner.

      A reservation is created with a default status `pending`, so when the _host_
      replies with a `accept` or `reject` response, the system knows which reservation
      the _host_ is referring to.

      In the next step we'll take a look at how the SMS notification is sent to
      the host when the reservation is created.

  .step(data-title="Reservation Creation",
    data-file='airtng_flask/models/reservation.py' data-highlight='35-55')
    :markdown
      ## Notifying the host

      When a reservation is created for a property, we want to notify the host
      that someone has made a reservation.

      For that purpose we use [Twilio's Rest
      API](//www.twilio.com/docs/quickstart/python/sms/sending-via-rest)
      to send a SMS message to the _host_, using your [Twilio phone
      number](//www.twilio.com/user/account/phone-numbers/incoming).

      Now we just have to wait for the host to send an SMS
      response accepting or rejecting the reservation, so we can notify the guest
      and host that the reservation information is updated accordingly.

      The next step shows how to handle and configure the host's SMS response.

      **See Also:**
      * [Twilio Rest API](//www.twilio.com/docs/api/rest)
      * [Twilio Python helper library](//www.twilio.com/docs/python/install)

  .step(data-title="Reservation Creation",
    data-file='airtng_flask/views.py',
    data-highlight='126-150')
    :markdown
      ## Handling Incoming Messages

      Let's take a closer look at the code on the right. That
      method handles our incoming Twilio request and does three things:

      1. Checks for a pending reservation from the incoming user

      1. Updates the status of the reservation

      1. Responds to the host and sends notification to the guest.

      ### Incoming Twilio Request
      In your [Twilio number](//www.twilio.com/user/account/phone-numbers/incoming)
      you must setup the SMS webhook to call your
      application's endpoint in the route `/confirm`. Remember to
      to expose your development machine to the outside world using
      [ngrok](//ngrok.com/). Your URL for the SMS web hook on your phone number
      should look like this:
      ```
      http://<subdomain>.ngrok.io/confirm
      ```

      An incoming request from Twilio comes with some helpful
      [parameters](//www.twilio.com/docs/api/twiml/sms/twilio_request#request-parameters).
      These include the `From` phone number and the message `Body`.

      We'll use the `From` parameter to look up the host and check if they have any
      pending reservations. If they do, we'll use the message body to check if they
      accepted or rejected the reservation. Then, we update the reservation status and
      use the `SmsNotifier` abstraction to send an SMS to the _guest_ telling them
      the host accepted or rejected their reservation request.

      ### TwiML Response

      Finally, we'll use [Twilio's TwiML](//www.twilio.com/docs/quickstart/python/sms/replying-to-sms-messages)
      as a response to Twilio's server
      instructing it to send sms notification message to the _host_, specifically the
      [Message verb](//twilio-python.readthedocs.org/en/latest/api/twiml.html#twilio.twiml.Message)
      from TwiML to instruct Twilio's server that it should send the message.

  .step(data-title='Finish')
    :markdown
      ## All Done

      Congrats! You just learned how to automate your workflow with Twilio SMS.

      To improve upon this you could add anonymous communications so that the host
      and guest could communicate through a shared Twilio phone number.
      [Head over to part two of this tutorial to see how](//www.twilio.com/docs/tutorials/walkthrough/masked-numbers/python/flask).

      You might also enjoy these other tutorials:

      [**IVR Phone Tree**](//www.twilio.com/docs/tutorials/walkthrough/ivr-phone-tree/python/flask)

      Create a seamless customer service experience by building an IVR Phone Tree for your company.

      [**Click To Call**](//www.twilio.com/docs/tutorials/walkthrough/click-to-call/python/flask)

      Convert web traffic into phone calls with the click of a button.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.

      ![Airtng](http://howtodocs.s3.amazonaws.com/airtng-screen2.png)
